*action_callback
跳转到此处显示tf.value的值
@text text=tf.value
[l][r]
[return]

*main

// make a simple textwindow
[textwindow color=0x005AB5 opacity=196 pos=[0,568] rect=[20, 20, 1024, 200]]
[textstyle stroke=true strokecolor=0x000000]
[animate index=1000 file="LineBreak_a" mode="horizontal" frame=16 interval=80 loop="bouncing"]
[textcursor index=1000 follow=true]
[textspeed interval=100]

//--------------------------------------------------------------------------------------------------
action指令可以操作sprite的各个属性，例如平移或旋转。[l][r]
[sprite index=1000 file="fg01_01"]
[addto index=1000 target=basic_layer pos=[300, 100]]
添加一个图片精灵。[p]

@jump label=*quick
*quick // 修改标签的位置跳到具体的代码段

//--------------------------------------------------------------------------------------------------
[action target=1000 mode="stretch" lt=[10,10] rt=[280,50] rb=[200,480] lb=[30,400] ease=""]
stretch将精灵变形[p]
//--------------------------------------------------------------------------------------------------
[action target=1000 mode="jump" time=1000 height=100 x=50 times=1]
jump让精灵执行跳跃动作（time参数必要）[p]
[action target=1000 mode="shake" time=100 range=10 vertical=false times=10]
shake让精灵执行震动动作（time参数必要）[p]
[action target=1000 mode="quake" time=1000 rangex=100 rangey=100 speed=1000]
quake让精灵执行震动动作（time参数必要）[p]
[action target=1000 mode="shaky3d" time=1000 hnum=10 vnum=10 offset=5 speed=1000]
shaky3d将精灵做3d网格震动（time参数必要）[p]
//--------------------------------------------------------------------------------------------------
[action target=1000 mode="visible" visible=false]
visible=false让精灵消失[l][r]
[action target=1000 mode="visible" visible=true]
visible=true让精灵显示[p]

//--------------------------------------------------------------------------------------------------
[action target=1000 mode="moveby" pos=[100, 0] ease=""]
moveby将精灵平移100。[p]
[action target=1000 mode="moveto" pos=[300, 100] ease=""]
moveto将精灵移动回原来的位置。[p]
[action target=1000 mode="fadeto" opacity=128 ease=""]
fadeto将精灵变为半透明。[p]
[action target=1000 mode="scaleto" x=120 y=120 ease=""]
scaleto将精灵放大为120%[p]
[action target=1000 mode="scaleby" x=120 y=120 ease=""]
scaleby将精灵继续放大为120%[p]
[action target=1000 mode="scissorto" rect=[0,0,300,300] ease=""]
scissorto将精灵剪裁到(300,300)[p]
[action target=1000 mode="scissorby" rect=[0,0,-100,-50] ease=""]
scissorby将精灵继续剪裁(-100,50)[p]
[action target=1000 mode="tintto" color=0x80FFFF ease=""]
tintto将精灵色调设置为0x80FFFF[p]
[action target=1000 mode="tintby" r=0x80 g=0xFF b=0xFF ease="" time=0]
tintby继续将精灵色调红色部分调整0x80（time参数必要？）[p]
//--------------------------------------------------------------------------------------------------
[action target=1000 mode="flipx" force=false]
flipx将精灵左右翻转[l][r]
[action target=1000 mode="flipx" force=false]
再执行flipx取消左右翻转效果。[p]
[action target=1000 mode="flipy" force=false]
flipy将精灵上下翻转[l][r]
[action target=1000 mode="flipy" force=false]
再执行flipy取消上下翻转效果。[p]
//--------------------------------------------------------------------------------------------------
[action target=1000 mode="remove" delete=true]
remove相当于执行remove指令，从父节点移除[l][r]
[sprite index=1000 file="fg01_01"]
[addto index=1000 target=basic_layer pos=[300, 100]]
将精灵重新添加到basic_layer[p]
//--------------------------------------------------------------------------------------------------
[action target=1000 mode="rotateto" rotate=45 ease=""]
rotateto将精灵旋转45度[p]
[action target=1000 mode="rotateby" rotate=45 ease=""]
rotateby将精灵继续旋转45度[p]
[action target=1000 mode="rotateto" rotate=0 ease=""]
rotateto将精灵旋转归0[p]
//--------------------------------------------------------------------------------------------------
[action target=1000 mode="rotatezto" rotate=45 ease=""]
rotatezto将精灵沿z轴旋转45度[p]
[action target=1000 mode="rotatezby" rotate=45 ease=""]
rotatezby将精灵沿z轴继续旋转45度[p]
[action target=1000 mode="rotatezto" rotate=0 ease=""]
rotatezto将精灵恢复到原位[p]

//--------------------------------------------------------------------------------------------------
通过parallel,queue,start,end，还可以创建action的组合。[l][r]
[action mode="queue"]
[action mode="moveby" pos=[200, 0] ease="" time=1000]
[action mode="moveby" pos=[0, -200] ease="" time=1000]
创建顺序执行的动作队列，先右移后上移。[l][r]
[action mode="start" target=1000]
开始执行该动作队列。[waitaction index=1000 canskip=true]
[l][r]
[action target=1000 mode="moveto" pos=[300, 100] ease=""]
[action target=1000 mode="rotateto" time=1000 rotate=0 times=1]
恢复精灵位置[p]

[action mode="parallel"]
[action mode="moveby" pos=[200, 0] ease="" time=1000]
[action mode="moveby" pos=[0, -200] ease="" time=1000]
创建并行执行的动作队列，右移和上移同时进行，变为斜向运动。[l][r]
[action mode="start" target=1000]
开始执行该动作队列。[waitaction index=1000 canskip=true]
[l][r]
[action target=1000 mode="moveto" pos=[300, 100] ease=""]
[action target=1000 mode="rotateto" time=1000 rotate=0 times=1]
恢复精灵位置[p]

//--------------------------------------------------------------------------------------------------
queue和parallel可以嵌套，用end来标记结束位置。[l][r]
[action mode="queue"]
[action mode="parallel"]
[action mode="moveby" pos=[200, 0] ease="" time=500]
[action mode="moveby" pos=[0, -200] ease="" time=500]
[action mode="end"]
[action mode="queue"]
[action mode="moveby" pos=[-200, 0] ease="" time=500]
[action mode="moveby" pos=[0, 200] ease="" time=500]
[action mode="end"]
设定结束后请使用start来开始队列的执行。[l][r]
[action mode="start" target=1000 times=3]
start指令还可以指定times参数，多次或永久重复执行动作。[r]
（times参数貌似有bug，实际执行次数比参数少一次）
[waitaction index=1000 canskip=true][p]

//--------------------------------------------------------------------------------------------------
使用stopaction结束一个队列播放的动作，会强制让动作播放完毕。[l][r]
在waitaction时候canskip=true，且用户点击跳过，也会导致动作播放完毕。[l][r]
[action mode="queue"]
[action mode="parallel"]
[action mode="moveby" pos=[400, 300] ease="" time=1000]
[action mode="rotateby" rotate=360 ease="" time=1000]
[action mode="end"]
[action mode="parallel"]
[action mode="moveby" pos=[-400, -300] ease="" time=1000]
[action mode="rotateby" rotate=360 ease="" time=1000]
[action mode="end"]
[action mode="start" target=1000 times=-1]
点击后action被强制停止。[l][r]
[stopaction index=1000]
因为动作结束在原位，停止后精灵归位。[l][p]

//--------------------------------------------------------------------------------------------------
还可以使用delay, delayuntil, callback来做复杂的操作。[l][r]
delay必须放在动作队列中使用，在队列中等待一定时间。[l][r]
[action mode="queue"]
[action mode="moveby" pos=[200, 0] ease="" time=500]
[action mode="delay" time=1000]
[action mode="rotateby" rotate=360 ease="" time=500]
[action mode="start" target=1000]
移动后等待1秒再旋转。[waitaction index=1000]
[l][p]

delayuntil必须放在动作队列中使用，在队列中等待某个表达式为真。[l][r]
表达式的上下文由param字典设定，且可以使用index参数，系统设为target的索引。[l][r]
[action mode="queue"]
[action mode="moveby" pos=[-200, 0] ease="" time=500]
[action mode="delayuntil" exp="tf.value==index+input" param=%["input"=>100]]
[action mode="rotateby" rotate=360 ease="" time=500]
[action mode="start" target=1000]
移动后等待tf.value==index+input，再执行旋转。[l][r]
#tf.value=1000+100;
执行脚本后，条件成立，开始旋转[waitaction index=1000][p]

callback必须放在动作队列中使用，在动作队列中跳转到其他标签。[l][r]
如果设置wait参数为true，可以等待标签return之后再执行后面的动作。[l][r]
[action mode="queue"]
[action mode="moveby" pos=[-200, 0] ease="" time=500]
[action mode="callback" file="main" label=*action_callback exp="tf.value=input" param=%["input"=>100] wait=true]
[action mode="rotateby" rotate=360 ease="" time=500]
[action mode="start" target=1000]
[waitaction index=1000]
完成旋转后动作结束[p]

//--------------------------------------------------------------------------------------------------
演示结束[l]
